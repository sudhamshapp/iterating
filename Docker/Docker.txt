hostport:containerport
docker engine/docker daemon
container is started/created through docker image > docker image is built through dockerfile
docker build -t <imagename:tag> -f Dockerfile2204(the Dockerfile name could be arbitary) . (. represents in the current directory) and if the Dockerfile has a standard name we can make invoke like this docker build -t <imagename:tag>
docker tag is basically useful for renaming docker tag <oldimagename:tag> <newimagename:tag>
docker run --name <arbitary> -d <detached mode(run in the background)> -p <ec2instanceport/hostport:containerport> <imageidhere>
docker ps
docker ps -a
docker stop <conatinerid>
docker start <conatinerid>
docker rm <conatinerid>
docker run -it <imageid> followed by ctrl+p then ctrl+q
In the command docker run --name mynginx -d -p 8080:80 nginx, the -p option is used to map ports between the host machine and the container.

Host Port (8080): This is the port on the host machine (the machine where Docker is running) that you want to expose to the outside world. In this case, port 8080 on the host machine is being used.

Container Port (80): This is the port inside the Docker container that the application (in this case, NGINX) is listening on. For NGINX, the default port is 80.

Summary:
Host Port: 8080
Container Port: 80
When you access http://<your-server-ip>:8080, it is redirected to port 80 inside the container where NGINX is running. This allows you to access the NGINX service running inside the container from your host machine on port 8080.
docker exec -it <container-id> /bin/bash- we can jump/ssh inside the container
docker history <imageid/imagename>(we can see the layer info that is added overtime through this command)
docker rmi <imagename>:<tag> or docker rmi <imageid>
docker
Dockerfile
docker images
docker conatiner prune - removes all the stopped containers in a single shot

This command saves a docker image to a tar archive
docker save -o <tar_file> <imageid>
example - docker save -o this-is-the-imagename-latest.tar this-is-the-imagename:latest

This command loads a docker image from a tar archive into the docker daemon
docker load -i <tarfilename>
example - docker load -i this-is-the-imagename-latest.tar